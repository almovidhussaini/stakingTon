;; Jettons minter smart contract
#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/utils.fc";
#include "imports/send-modes.fc";
#include "imports/jetton-utils.fc";

slice addr_none() asm "<b 0 2 u, b> <s PUSHSLICE";
const hton_wallet_address = "0xDMnxwPS_QCY80iZsHWqjfnP8YmC_qv0wBXuja09vF5hEjk";

;;const hton_master_address = "EQDPdq8xjAhytYqfGSX8KcFWIReCufsB9Wdg0pLlYSO_h76w"; ;;hipo ton master address
;;const tsTon_master_address = "EQC98_qAmNEptUtPc7W6xdHh_ZHrBUFpw5Ft_IzNU20QAJav"; ;;tonstakers ton
;;const stTon_master_address = "EQDNhy-nxYFgUqzfUzImBEP67JqsyMIcyk2S5_RwNNEYku0k"; ;; staked ton

;; storage scheme
;; storage#_ total_supply:Coins admin_address:MsgAddress transfer_admin_address:MsgAddress jetton_wallet_code:^Cell = Storage;
(int, slice, cell, cell,cell) load_data() inline {
  slice ds = get_data().begin_parse();
  var data = (
                ds~load_coins(), ;; total_supply
                ds~load_msg_addr(), ;; admin_address
                ds~load_ref(),  ;; content name discription, symbol
                ds~load_ref(),  ;; jetton wallet code
                ds~load_ref() ;; cell containing staking data
              );
  ds.end_parse();
  return data;
}

() save_data(int total_supply, slice admin_address, cell content, cell jetton_wallet_code ,cell staked_data) impure inline {
  set_data(begin_cell()
            .store_coins(total_supply)
            .store_slice(admin_address)
            .store_ref(content)
            .store_ref(jetton_wallet_code)
            .store_ref(staked_data)
           .end_cell()
    );
}

() send_to_jetton_wallet(slice to_address, cell jetton_wallet_code, int amount, cell master_msg, int need_state_init) impure {
  cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
  slice to_wallet_address = calculate_jetton_wallet_address(state_init);
  var msg = begin_cell()
    .store_uint(0x18, 6)            ;; 0b011000 tag - 0, ihr_disabled - 1, bounce - 1, bounced - 0, src = adr_none$00
    .store_slice(to_wallet_address)
    .store_coins(amount)
    .store_uint(need_state_init ? (4 + 2 + 1) : 1, need_state_init ? (1 + 4 + 4 + 64 + 32 + 1 + 1 + 1) : (1 + 4 + 4 + 64 + 32 + 1 + 1));

    if (need_state_init) {
        msg = msg.store_ref(state_init);
    }

    msg = msg.store_ref(master_msg);

  send_raw_message(msg.end_cell(), REVERT_ON_ERRORS | PAY_FEES_SEPARATELY);

}

cell create_inner_staked_data(int amount, int staked_time_period) inline {
    return begin_cell()
        .store_coins(amount)                    ;; Store amount
        .store_uint(staked_time_period, 64)     ;; Store staking timestamp
        .end_cell();
}

cell create_nested_staked_data(slice user_address, slice token_address, int amount, int staked_time_period) inline {
  ;; Create the staked data cell for the token address
    cell staked_data = create_inner_staked_data(amount, staked_time_period);

    cell inner_dict = begin_cell()
        .store_dict(dict_set?(null(), token_address, staked_data)) ;; Store token address and its data
        .end_cell();
      
    cell outer_dict = begin_cell()
        .store_dict(dict_set?(null(), user_address, inner_dict))   ;; Store user address and its inner dictionary
        .end_cell();

    return outer_dict;
}

(int, int) get_staked_data(cell staked_data, slice user_address, slice token_address)  inline {
    ;; Parse the outer dictionary (which maps user address to the inner dictionary)
    var outer_dict = staked_data.dict_parse();

    ;; Try to get the inner dictionary (which maps token address to staked data) for the user address
    var maybe_inner_dict = outer_dict.dict_get?(user_address);
    
    if (maybe_inner_dict.has_value()) {
        ;; Retrieve the inner dictionary
        cell inner_dict_cell = maybe_inner_dict.get();
        var inner_dict = inner_dict_cell.dict_parse();
        
        ;; Retrieve the staked data (amount, staking_time_period, token_address) for the given token address
        var maybe_value_cell = inner_dict.dict_get?(token_address);
        
        if (maybe_value_cell.has_value()) {
            cell value_cell = maybe_value_cell.get();
            slice value_slice = value_cell.begin_parse();

            int amount = value_slice~load_coins();
            int staking_time_period = value_slice~load_uint(64);

            return (amount, staking_time_period);
        } else {
            return (0, 0);
        }
    } else {
        return (0, 0);
    }
}

int calculate_rewards(int staked_amount, int staking_duration) inline {
    int reward_rate_per_year = 4; ;; 4% yearly reward rate
    int duration_in_years = staking_duration / 31536000; ;; Convert seconds to years (31536000 seconds in a year)
    
    ;; Calculate reward for the entire duration
    int total_reward_rate = reward_rate_per_year * duration_in_years;

    ;; Calculate the reward based on the amount staked and total reward rate
    return muldiv(staked_amount, total_reward_rate, 100);
}

() update_staked_data( slice user_address, slice token_address, int new_amount, int new_staking_timestamp)impure inline {
      (int total_supply, slice admin_address,cell content, cell jetton_wallet_code, cell staked_data) = load_data();
      var user_staked_dict = staked_data.dict_parse();

      ;;check if the user excists
      if(user_staked_dict.exists(user_address)){
        cell token_data_cell = user_staked_dict.get(user_address);
         var token_staked_dict = token_data_cell.dict_parse();

          ;; Update or add the token address with the new values (amount, timestamp)
        cell updated_token_data = begin_cell()
            .store_coins(new_amount)
            .store_uint(new_staking_timestamp, 64)
            .end_cell();

        token_staked_dict.set(token_address, updated_token_data);

        ;; Update the user data in the outer dictionary with the modified inner dictionary
        cell updated_user_data = begin_cell().store_dict(token_staked_dict).end_cell();
        user_staked_dict.set(user_address, updated_user_data);

      }
      else{
        ;; (cell create_nested_staked_data) = create_nested_staked_data(user_address,token_address,new_amount,new_staking_timestamp);
        var token_staked_dict = begin_cell().store_coins(new_amount).store_uint(new_staking_timestamp, 64).end_cell();
        ;; cell updated_user_data = begin_cell().store_dict({token_address => token_staked_dict}).end_cell();
        ;; var token_dict = dictionary<slice, cell>();;
        ;; var token_dict = dict_create();
        var token_dict = dict_new();
        token_dict.set(token_address, token_staked_data);
        cell updated_user_data = begin_cell()
          .store_dict(token_dict) ;; Store the token dictionary
          .end_cell();

        user_staked_dict.set(user_address, updated_user_data);
        
      }
       ;; Store the updated staked data
    set_data(begin_cell()
        .store_coins(total_supply)            ;; Store total supply
        .store_slice(admin_address)           ;; Store admin address
        .store_ref(content)   ;; Store content
        .store_ref(jetton_wallet_code)        ;; Store jetton wallet code
        .store_ref(user_staked_dict)          ;; Store the updated nested staked data
        .end_cell());

}


() claim_reward(slice sender_address, slice token_address,int amount, cell master_msg) inline {
      (int total_supply, slice admin_address, cell content, cell jetton_wallet_code, cell staked_data) = load_data();
      (int staked_amount, int staked_time) = get_staked_data(staked_data,sender_address,token_address);
      throw_unless(error::not_enouph_staked_balance,staked_amount>0 );
      throw_unless(error::zero_stack_time,staked_time>0);
      int staking_duration = now() - staked_time;
      (int reward_amount) = calculate_rewards(staked_amount,staking_duration);
      if(reward_amount > 0) {
        ;; mintToken_base
        send_to_jetton_wallet(sender_address, jetton_wallet_code, amount, master_msg, 1);
        update_staked_data(sender_address,token_address,staked_amount,now());
      }
}

void withdraw_tokens(slice recipient_address, slice token_address, int amount, slice contract_address, slice user_address) inline {
;; contract_address,user_address
  (int total_supply, slice admin_address, cell content, cell jetton_wallet_code,cell staked_data) = load_data();

  ;;  cell state_init_contract_address = calculate_jetton_wallet_state_init(my_address(), token_address, jetton_wallet_code);
  ;; slice contract_address = calculate_jetton_wallet_address(state_init_contract_address);

  ;; cell state_init_user_address = calculate_jetton_wallet_state_init(sender_address, token_address, jetton_wallet_code);
  ;; slice user_address = calculate_jetton_wallet_address(state_init_user_address);
    ;; Construct the Jetton transfer message
    var jetton_transfer_msg = begin_cell()
        .store_uint(0xf8a7ea5, 32) ;; Jetton transfer op code
        .store_uint(0, 64) ;; Query ID
        .store_coins(toNano(amount)) ;; Token amount to transfer
        .store_slice(user_address) ;; Recipient's address
        .store_slice(contract_address) ;; Sender's (contract's) Jetton wallet address
        .store_bit(0) ;; no custom payload
        .store_coins(0) ;; forward amount - if > 0, will send notification message
        .store_bit(0) 
        .end_cell();

    ;; Send the Jetton transfer message
    send_raw_message(jetton_transfer_msg, 0);
}
;;  update_staked_data( slice user_address, slice token_address, int new_amount, int new_staking_timestamp)
() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; process only mint bounces
        in_msg_body~skip_bits(32);
        ifnot(in_msg_body~load_uint(32) == op::internal_transfer) {
          return ();
        }
        in_msg_body~skip_bits(64); ;; query_id
        int jetton_amount = in_msg_body~load_coins();
        (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
        save_data(total_supply - jetton_amount, admin_address, content, jetton_wallet_code);
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of provide_wallet_address cost

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code, cell staked_data) = load_data();

    if (op == op::mint) {
        throw_unless(error::not_owner, equal_slices(sender_address, admin_address));
        slice to_address = in_msg_body~load_msg_addr();
        force_chain(to_address);
        int amount = in_msg_body~load_coins();
        throw_unless(error::invalid_op, amount >= mint_gas_consumption + fwd_fee);
        cell master_msg = in_msg_body~load_ref();
        slice master_msg_cs = master_msg.begin_parse();
        throw_unless(error::invalid_op, master_msg_cs~load_uint(32) == op::internal_transfer);
        master_msg_cs~skip_bits(64); ;; query_id
        int jetton_amount = master_msg_cs~load_coins();
        master_msg_cs~load_msg_addr();
        master_msg_cs~load_msg_addr();
        master_msg_cs~load_coins();
        if( master_msg_cs~load_int(1)) {
            master_msg_cs~load_ref();
        }
        master_msg_cs.end_parse();
        send_to_jetton_wallet(to_address, jetton_wallet_code, amount, master_msg, 1);
        save_data(total_supply + jetton_amount, admin_address, content, jetton_wallet_code,staked_data);
        return ();
    }

    if(op == op::claim_reward){
      ;; slice to_address = sender_address;
      force_chain(sender_address);
      int amount = in_msg_body~load_coins();
      throw_unless(error::invalid_op, amount >= mint_gas_consumption + fwd_fee);
      slice token_address = in_msg_body~load_msg_addr();
      cell master_msg = in_msg_body~load_ref();
        slice master_msg_cs = master_msg.begin_parse();
        throw_unless(error::invalid_op, master_msg_cs~load_uint(32) == op::internal_transfer);
        master_msg_cs~skip_bits(64); ;; query_id
        int jetton_amount = master_msg_cs~load_coins();
        
        master_msg_cs~load_msg_addr();
        master_msg_cs~load_msg_addr();
        master_msg_cs~load_coins();
        if(master_msg_cs~load_int(1)) {
            master_msg_cs~load_ref();
        }
        claim_reward(sender_address,token_address,amount,master_msg)

        ;; claim_reward(slice sender_address, slice token_address,int amount, cell master_msg)

        save_data(total_supply + jetton_amount, admin_address, content, jetton_wallet_code,staked_data);
        return();
    }

    if(op = op::stake) {
       int amount = in_msg_body~load_coins(); ;;amount of token need to stake
       throw_unless(error::insufficient_stack_amount, amount > 0);
       slice token_address = in_msg_body~load_slice(); ;; Token address to stake
      (sender_prev_amount,sender_prev_stacked_time) stake_data = get_staked_data(staked_data,sender_address,token_address);
        int new_amount = sender_prev_amount + amount;
         update_staked_data(sender_address,token_address,new_amount,now());
         slice jetton_payload = in_msg_body~load_ref_as_slice();

  ;;        cell state_init_contract_address = calculate_jetton_wallet_state_init(my_address(), token_address, jetton_wallet_code);
  ;; slice contract_address = calculate_jetton_wallet_address(state_init_contract_address);

  ;; cell state_init_user_address = calculate_jetton_wallet_state_init(sender_address, token_address, jetton_wallet_code);
  ;; slice user_address = calculate_jetton_wallet_address(state_init_user_address);
  slice contract_address = in_msg_body.load_msg_addr();
  slice user_address = in_msg_body.load_msg_addr();
  
    var jetton_transfer_msg = begin_cell()
        .store_uint(0xf8a7ea5, 32) ;; Jetton transfer op code
        .store_uint(0, 64) ;; Query ID
        .store_coins(toNano(amount)) ;; Token amount to transfer Function toNano use decimals = 9
        .store_slice(contract_address) ;; address of the recipient
        .store_slice(user_address) ;; Token wallet address (destination)
        .store_bit(0) ;; no custom payload
        .store_coins(0) ;; forward amount - if > 0, will send notification message
        .store_bit(0) ;;we store forwardPayload as a reference, set 1 and uncomment next line for have a comment
        .end_cell();

    ;; Send the transfer message to the Jetton wallet
    send_raw_message(jetton_transfer_msg, 0);

         return();

    }
    if(op = op::unstake){  
      int amount = in_msg_body~load_coins();
      slice token_address = in_msg_body~load_slice();
      (sender_prev_amount,sender_prev_stacked_time) stake_data = get_staked_data(staked_data,sender_address,token_address);
      throw_unless(error::insufficient_stack_amount, sender_prev_amount >= amount);
      int new_amount = sender_prev_amount - amount;

      slice contract_address = in_msg_body.load_msg_addr();
  slice user_address = in_msg_body.load_msg_addr();
       update_staked_data(sender_address,token_address,new_amount,sender_prev_stacked_time);
         withdraw_tokens(sender_address, token_address, amount,contract_address,user_address);
       return();
    }

    if (op == op::burn_notification) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        throw_unless(error::not_valid_wallet,
            equal_slices(calculate_user_jetton_wallet_address(from_address, my_address(), jetton_wallet_code), sender_address)
        );
        save_data(total_supply - jetton_amount, admin_address, content, jetton_wallet_code);
        slice response_address = in_msg_body~load_msg_addr();
        if (response_address.preload_uint(2) != 0) {
            var msg = begin_cell()
            .store_uint(0x10, 6) ;; nobounce
            .store_slice(response_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses, 32)
            .store_uint(query_id, 64);
            send_raw_message(msg.end_cell(), IGNORE_ERRORS | CARRY_REMAINING_GAS);
        }
        return ();
    }
    if (op == op::upgrade) {
        throw_unless(error::not_owner, equal_slices(sender_address, admin_address));
        (cell new_data, cell new_code) = (in_msg_body~load_ref(), in_msg_body~load_ref());
        set_data(new_data);
        set_code(new_code);
        return ();
    }

    throw(error::wrong_op);
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    return (total_supply, -1, admin_address, content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}